configuration:
  dependencies:
  - "mvn://com.walmartlabs.concord.plugins.basic:crypto-tasks:0.66.1-SNAPSHOT"
  - "mvn://com.walmartlabs.concord.plugins.basic:smtp-tasks:0.66.1-SNAPSHOT"
  - "mvn://com.walmartlabs.concord.plugins:jira-task:0.41.1-SNAPSHOT"
  - "mvn://org.codehaus.groovy:groovy-all:2.4.12"
  arguments:
    smtpParams:
      host: smtp-gw1.wal-mart.com
      port: 25
    emailText : error.moustache
    baseUrl: http://localhost:8001/api/v1/
    TeamUserList: "[]"
    userName: cn=myuser
    passwordKey: u+lZMQVnqd8u+VWguVklLQ==
    adminEmail: "sender email id"
    jiraConfig:
      jiraUrl: "https://confiz.atlassian.net"
      jiraUid: "humna.naeem@confiz.com"
      jiraPwd: "g00dbuddy"
      jiraProjectKey: "CON"
      reporter: "humna.naeem"
      jiraRequestorUid: "humna.naeem"
      jiraIssueTypeId: 10900
      jiraTransitionId: 2
      jiraTransitionComment: "Request rejected from the admin"
      
  
flows:
  default:
  - log: ${requestInfo}
  - task: http
    in:
       method: GET
       auth:
        basic:
          username: ${userName}
          password: ${crypto.decryptString(passwordKey)}
       url: ${baseUrl}org/Default/inventory/${requestInfo.query.inventoryName}/data/itemPath:${requestInfo.query.inventoryName}
       request: json
       response: json
       out: inventoryResponseData
    

  - if: ${inventoryResponseData.success}
    then:
    - script: groovy
      body: |
        import groovy.json.JsonSlurper
     	def content = inventoryResponseData.content
   	Object[] keys = content.keySet().toArray();
   	def list = content.get(keys[0]).data;
	execution.setVariable("dataContent",list);
    - log: ${dataContent}
    - set:
        jiraConfig.jiraIssueKey: ${dataContent.jiraIssueId}
	requesterEmail:  ${dataContent.email}
    - if: ${dataContent.requestType == "create"}
      then:
      - CreateOrganizationFlow

    - if: ${dataContent.requestType == "join"}
      then:
      - JoinOrganizationRequest
  - Email



  CreateOrganizationFlow:
      - form: adminformCreateOrganization
      - set:
          emailText: "reject.moustache"
      - if: ${adminformCreateOrganization.accept == "accept"}
        then:
        - set:
            emailText: "createTeamFailed.moustache"
        - task: http
          in:
            method: POST
            auth:
              basic:
		  username: ${userName}
		  password: ${crypto.decryptString(passwordKey)}
            body:
              name: ${dataContent.org}
            url: ${baseUrl}org
            request: json
            response: json
            out: orgrespone
        - log: ${orgrespone}
        - if: ${orgrespone.success}
          then:
          - script: groovy
            body: |
              import groovy.json.JsonSlurper
              import groovy.json.JsonBuilder
              def userArray = dataContent.userlist.split(',')

              def addTeamUserlist = "["
              for (String user : userArray) {
                    if(addTeamUserlist != "["){
                    addTeamUserlist = addTeamUserlist + ',{"username":"'+user+'"}'
                    }else{
                    addTeamUserlist = addTeamUserlist + '{"username":"'+user+'"}'
                    }
              }

              addTeamUserlist = addTeamUserlist+"]"
              execution.setVariable("TeamUserList",addTeamUserlist);
          - task: http
            in:
              method: PUT
              auth:
                basic:
		  username: ${userName}
		  password: ${crypto.decryptString(passwordKey)}
              body: ${TeamUserList}
              url: ${baseUrl}org/${dataContent.org}/team/default/users
              response: json
              request: json
              out: addUserTeamResponse
          - if: ${addUserTeamResponse.success}
            then:
            - set:
                emailText: "createTeamSuccess.moustache"
               
        
  JoinOrganizationRequest:
      - form: adminformJoinOrganization   
      - set:
          emailText: "reject.moustache"
      - if: ${adminformJoinOrganization.accept == "accept"}
        then:
        - set:
            emailText: "joinTeamFailed.moustache"
        - task: http
          in:
            method: PUT
            auth:
              basic:
		  username: ${userName}
		  password: ${crypto.decryptString(passwordKey)}
            body: '[{"username":"${dataContent.user}"}]'
            url: ${baseUrl}org/Default/team/${dataContent.selectedOrg}/users
            response: json
            request: json
            out: addUserTeamResponse
          
        - if: ${addUserTeamResponse.success}
          then:
            - set:
                emailText: "joinTeamSuccess.moustache"
                jiraConfig.jiraTransitionComment: "Request process successfully"

  Email:
    - if: ${emailText == "error.moustache"}
      then:
      - set:
         requesterEmail: initiator.attributes.mail

    - task: smtp
      in:
        mail:
         from: ${adminEmail}
         to: ${requesterEmail}
         subject: "Request Process response"
         template: ${emailText}
    - log: ${jira.transition(context, jiraConfig)}
  
forms:
   adminformJoinOrganization:
   - requesterName: { label: "Requester Name", type: "string" ,value : "${dataContent.user}" } 
   - orgname: { label: "Organization Name", type: "string" ,value : "${dataContent.selectedOrg}" } 
   - accept: { label: "Request Accept", type: "string" ,value : "accept" }  

   adminformCreateOrganization:
   - requesterName: { label: "Requester Name", type: "string" ,value : "${dataContent.user}" } 
   - orgname: { label: "Organization Name", type: "string" ,value : "${dataContent.org}" }  
   - accept: { label: "Request Accept", type: "string" ,value : "accept" }  
   - userList: { label: "User List", type: "string" ,value : "${dataContent.userlist}" }   


              
