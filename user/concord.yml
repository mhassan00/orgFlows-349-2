configuration:
  dependencies:
  - "mvn://com.walmartlabs.concord.plugins.basic:crypto-tasks:0.66.1-SNAPSHOT"
  - "mvn://com.walmartlabs.concord.plugins.basic:smtp-tasks:0.66.1-SNAPSHOT"
  - "mvn://com.walmartlabs.concord.plugins:jira-task:0.41.1-SNAPSHOT"

  arguments:
    smtpParams:
      host: smtp-gw1.wal-mart.com
      port: 25
    inventoryName : ${txId}_inventory
    adminRepoName : "orgFlow_repo"
    baseUrl: http://localhost:8001/api/v1/
    passwordKey: T1GX6KfQ5GbjOZqnnE91Gw==
    adminEmailIds: "muhammad.hassan@confiz.com"
    username: "cn=mysuer"
    jiraConfig:
      jiraUrl: "https://confiz.atlassian.net"
      jiraUid: "Jira email id"
      jiraPwd: "jira password"
      jiraProjectKey: "CON"
      jiraRequestorUid: "user name"
      jiraIssueTypeId: 10900
    userRequestForm:
      apiBaseUrl: ${baseUrl}

    
flows:
  default:
  - log: ${jiraConfig}
  - form: userRequestForm  
  - CreateUserDataInvetory
  - if: ${inventorysResponse.success}
    then:
    - if: ${userRequestForm.requestType == "create"}
      then:
      - set:
              jiraConfig.jiraSummary: "${initiator.username} request for create organization"
              jiraConfig.jiraDescription: "${initiator.username} request for ${userRequestForm.org} organization creation with following users ${userRequestForm.userlist}"
      else:
      - set:
           jiraConfig.jiraSummary: "${initiator.username} request for join organization"
           jiraConfig.jiraDescription: "${initiator.username} request for ${userRequestForm.selectedOrg} join organization"
    - log: ${jira.create(context,jiraConfig)}
    - set:
        userRequestForm.jiraIssueId: ${jiraConfig.jiraIssueKey}
        userRequestForm.email: ${initiator.attributes.mail}
    - AddFormDataInInventory
    - if: ${inventoryDataResponse.success}
      then:
      - EmailToAdmin
    else:
    - ErrorEmailToUser
     
    
  AddFormDataInInventory:
    - task: http
      in:
        method: POST
        auth:
          basic:
	     username: ${userName}
	     password: ${crypto.decryptString(passwordKey)}
        body:
                orgName: default
                inventoryName: ${inventoryName}
                data: ${userRequestForm}
        url: ${baseUrl}org/Default/inventory/${inventoryName}/data/itemPath:${inventoryName}
        request: json
        response: json
        out: inventoryDataResponse
  

  CreateUserDataInvetory:
    - task: http
      in:
          method: POST
          auth:
            basic:
		  username: ${userName}
		  password: ${crypto.decryptString(passwordKey)}
          body:
              orgName: default
              name: ${inventoryName}
          url: ${baseUrl}org/Default/inventory
          request: json
          response: json
          out: inventorysResponse
    - log: ${inventorysResponse}
    
  ErrorEmailToUser:
    - task: smtp
      in:
         mail:
          from: humna.naeem@confiz.com
          to: ${adminEmailIds}
          subject: Request from user ${initiator.username}
          template: error.moustache
  
  EmailToAdmin:
    - task: smtp
      in:
        mail:
         from: ${ initiator.attributes.mail}
         to: ${adminEmailIds}
         subject: Request from user ${initiator.username}
         template: success.moustache
         
forms:
  userRequestForm:
  - user: { label: "User name", type: "string"  , value : "${initiator.username}" }
  - requestType: { label: "Select Request", type: "string", allow: ["create", "join"] }
  - org: { label: "Organization name", type: "string"   }
  - userlist: { label: "User List", type: "string"  , value : "enter comma seprated user list " }
  - selectedOrg: { label: "Select Organization", type: "string" }
  - apiBaseUrl: { label: "Select Organization", type: "string" }
